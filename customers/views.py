from rest_framework.response import Response
from rest_framework import viewsets, status
from rest_framework.permissions import BasePermission, IsAuthenticated
from rest_framework.decorators import api_view, permission_classes


from playgrounds.models import SportVenue
from bookings.models import Booking, Transaction
from playgrounds.serializers import SportVenueSerializer
from bookings.serializers import BookingSerializer, TransactionSerializer
from .services import get_financial_summary, get_venue_usage, get_user_activity


# üîπ –ö–∞—Å—Ç–æ–º–Ω—ã–µ permissions
class IsOwner(BasePermission):
    """–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–æ–ª—è"""

    def has_permission(self, request, view):
        return request.user.is_authenticated and hasattr(request.user, "is_owner") and request.user.is_owner


class IsSuperAdminOrOwner(BasePermission):
    """–î–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É"""

    def has_permission(self, request, view):
        return request.user.is_authenticated and (getattr(request.user, "is_superuser", False) or getattr(request.user, "is_owner", False))


# üîπ –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º–∏ –ø–ª–æ—â–∞–¥–∫–∞–º–∏
class OwnerVenueViewSet(viewsets.ModelViewSet):
    serializer_class = SportVenueSerializer
    permission_classes = [IsAuthenticated, IsOwner]

    def get_queryset(self):
        return SportVenue.objects.filter(owner=self.request.user)

    def perform_create(self, serializer):
        try:
            serializer.save(owner=self.request.user)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


# üîπ –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫
class OwnerBookingViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated, IsOwner]

    def get_queryset(self):
        return Booking.objects.filter(stadium__venue__owner=self.request.user).select_related("stadium", "user")


# üîπ –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
class OwnerTransactionViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = TransactionSerializer
    permission_classes = [IsAuthenticated, IsOwner]

    def get_queryset(self):
        return Transaction.objects.filter(
            booking__stadium__venue__owner=self.request.user
        ).select_related("booking", "user")


# üîπ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
@api_view(["GET"])
@permission_classes([IsAuthenticated, IsOwner])
def owner_analytics(request):
    owner = request.user
    try:
        data = {
            "financial_summary": get_financial_summary(owner),
            "venue_usage": get_venue_usage(owner, "month"),
            "user_activity": get_user_activity(owner, "month"),
        }
        return Response(data)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv(".env_dev")

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY')

DEBUG = int(os.getenv('DEBUG', 0)) == 1
print(f"DEBUG is set to: {DEBUG}")

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')
if DEBUG:
    ALLOWED_HOSTS = ['*'] # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏


INSTALLED_APPS = [
    'unfold', 
    "unfold.contrib.filters",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',
    'django_filters',
    'accounts.apps.AccountsConfig',
    'playgrounds.apps.PlaygroundsConfig',
    'bookings.apps.BookingsConfig',
    'customers.apps.CustomersConfig',
    
    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    'django_admin_listfilter_dropdown',
]

MIDDLEWARE = [
    # 'djangoProject.middleware.RequestTimingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'unfold.context_processors.theme',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        }
    }
    
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'polya_top_bot_database_vcvj',
#         'USER': 'polya_top_bot_database_vcvj_user',
#         'PASSWORD': 'pzOgYhcI2TKAnZgYI4Ttzu3piRxrVfaM',
#         'HOST': 'dpg-d1t2gs3e5dus73e37d80-a.oregon-postgres.render.com',
#         'PORT': '5432',
#         'OPTIONS': {
#             'sslmode': 'require',
#         },
#     }
# }

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'


USE_TZ = True
TIME_ZONE = "Asia/Tashkent"


from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ('ru', _('–†—É—Å—Å–∫–∏–π')),
    ('uz', _('O‚Äòzbekcha')),
    ('en', _('English')),
]

USE_I18N = True

LOCALE_PATHS = [BASE_DIR / 'locale/']



STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

AUTH_USER_MODEL = 'accounts.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    # "EXCEPTION_HANDLER": "djangoProject.exception_handler.custom_exception_handler",
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_ORDERING': ['-created_at'],
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'patch',
        'delete',
    ],
    'DEFAULT_AUTO_SCHEMA_CLASS': 'drf_yasg.inspectors.SwaggerAutoSchema',
    'DEFAULT_SCHEMA_CLASS': 'drf_yasg.openapi.SwaggerSchema',
    'USE_SESSION_AUTH': False,
}


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (HTTPS) ---
# –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (DEBUG=True) –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π HTTPS
if DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'http')
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
else:
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (DEBUG=False) –≤–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –∏ CSRF (–í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø) ---
# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALLOWED_ORIGINS = os.getenv('ALLOWED_ORIGINS', '').split(',')

# 1. CORS_ALLOWED_ORIGINS
# –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'corsheaders'.
CORS_ALLOWED_ORIGINS = [
    origin.strip() for origin in ALLOWED_ORIGINS if origin.strip()
]

CORS_ALLOW_CREDENTIALS = True

# 2. CSRF_TRUSTED_ORIGINS (–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å VERIFY_CSRF_TOKEN)
# –î–æ–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–º –¥–æ–≤–µ—Ä—è–µ—Ç Django –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞.
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª—ç—à –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
CSRF_TRUSTED_ORIGINS = [
    f'{origin.strip()}/' 
    for origin in ALLOWED_ORIGINS 
    if origin.strip() and not origin.strip().endswith('/')
]

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª—ç—à–µ–º 
CSRF_TRUSTED_ORIGINS.extend(
    [origin.strip() for origin in ALLOWED_ORIGINS if origin.strip().endswith('/')]
)

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Web App (–µ—Å–ª–∏ Web App –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–∑ Telegram)
# –ï—Å–ª–∏ –≤–∞—à –∫–ª–∏–µ–Ω—Ç Web App —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram, –≤–∞–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å
# –ø–æ–¥–¥–æ–º–µ–Ω telegram.org
# CORS_ALLOWED_ORIGIN_REGEXES = [
#    r"^https://.*\.telegram\.org$",
# ]



STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Telegram Bot Settings
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
WEBAPP_URL = os.getenv('WEBAPP_URL')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'accounts': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

sentry_sdk.init(
    dsn=os.getenv('SENTRY_DSN'),
    integrations=[DjangoIntegration()],
    auto_session_tracking=False,
    traces_sample_rate=0
)


UNFOLD = {
    "SITE_TITLE": "PolyaTop Admin",
    "SITE_HEADER": "PolyaTop –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "SITE_SUBHEADER": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "SHOW_HISTORY": False,
    "SHOW_VIEW_ON_SITE": False,
    "DARK_MODE": True,
    "SIDEBAR_COLLAPSED": True,  # üëâ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "MOBILE_MENU": True,        # üëâ –≤–∫–ª—é—á–∞–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é (–≤–∞–∂–Ω–æ!)
    "CUSTOM_CSS": ["unfold_custom.css"],
    "DASHBOARD_CALLBACK": "accounts.admin_dashboard.dashboard_view",
}

# Generated by Django 5.2 on 2025-10-15 07:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('superadmin', 'Супер админ'), ('support', 'Поддержка'), ('owner', 'Владелец поля'), ('customer', 'Клиент')], default='customer', max_length=10, verbose_name='Роль')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user/profile/avatar', verbose_name='Фотография')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефон')),
                ('language', models.CharField(default='ru', max_length=10, verbose_name='Язык')),
                ('football_experience', models.CharField(blank=True, choices=[('newbie', 'Менее года'), ('amateur', '1-3 года'), ('regular', '3-5 лет'), ('pro', 'Более 5 лет')], max_length=20, null=True, verbose_name='Опыт')),
                ('football_frequency', models.CharField(blank=True, choices=[('never', 'Вообще не играю'), ('yearly', 'Несколько раз в год'), ('monthly', 'Несколько раз в месяц'), ('weekly', 'Несколько раз в неделю')], max_length=20, null=True, verbose_name='Частота игры')),
                ('football_competitions', models.BooleanField(default=False, verbose_name='Участвовали ли в соревнованиях?')),
                ('football_formats', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('3x3', '3 на 3'), ('4x4', '4 на 4'), ('5x5', '5 на 5'), ('6x6', '6 на 6'), ('7x7', '7 на 7'), ('8x8', '8 на 8'), ('9x9', '9 на 9'), ('10x10', '10 на 10'), ('11x11', '11 на 11')], max_length=10), blank=True, default=list, null=True, size=None, verbose_name='Форматы игры')),
                ('football_position', models.CharField(blank=True, choices=[('gk', 'Вратарь'), ('def', 'Защитник'), ('mid', 'Полузащитник'), ('fwd', 'Нападающий')], max_length=10, null=True, verbose_name='Позиция (вратарь, защитник и т.д.)')),
                ('telegram_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telegram ID')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
